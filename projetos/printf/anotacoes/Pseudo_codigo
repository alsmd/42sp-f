Primeiras observações
	1 Ira printar no stdout a string passada como primeiro parametro.
	2 Não consigo passar um ponteiro nullo pra ele.
	3 Não consigo passar uma string vazia.
	4 Caso tenha "%" acompanhado por uma letra ele tentara troca por um valor passado por parametro
	5 Caso o "%" seja especificado mas nenhum parametro seja passado, ele nos mandara um warning, e o valor printado
	no lugar do "%" sera um lixo de memoria
	5 Usar "%" sem um identificador nos gerara um warning
	6 Caso o valor passado como parametro seja diferente do passado com "%" o resultado sera idefinido, pois o valor
	passado sera lido como "%" o filtro usado
	7 Dois "%" printa o character %

Argumentos:
	%c print a single character.
	%s print a string of characters.
	%p The void * pointer argument is printed in hexadecimal.
	%d print a decimal (base 10) number.
	%i print an integer in base 10.
	%u print an unsigned decimal (base 10) number.
	%x print a number in hexadecimal (base 16).
	%% print a percent sign.

Flags:
	"-" Justifica a esquerda
	"0"	Justiica a esquerda com zeros
	"."
	"#" com octal coloca um 0 na frente, com hexadecimal coloca 0x
	"+" justifica a direita
Estrutura:
	%[sinalizadores] [largura] [. precisão] [tamanho] tipo



Como os parametros serão organizados (%algumacoisa)
	struct?

Iremos começar a tranferir a string passada como parametro para buffer->data.
Caso ache % iremos tranferir para função responsavel por lidar com esse parametro.
t_buffer
{
	char	*data;
}

t_param
{
	char	*data;
	char	*flags;
	int		type;
}




Como pode ser feito?
	Iremos printar toda a string passada como parametro na saida padrão.

